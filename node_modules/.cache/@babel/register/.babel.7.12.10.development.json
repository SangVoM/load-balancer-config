{
  "{\"sourceRoot\":\"/Users/vnext/Desktop/NISUMU/load-balancer-config/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/vnext/Desktop/NISUMU/load-balancer-config\",\"filename\":\"/Users/vnext/Desktop/NISUMU/load-balancer-config/index.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/vnext/Desktop/NISUMU/load-balancer-config\",\"plugins\":[],\"presets\":[]}:7.12.10": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/vnext/Desktop/NISUMU/load-balancer-config/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/vnext/Desktop/NISUMU/load-balancer-config",
      "filename": "/Users/vnext/Desktop/NISUMU/load-balancer-config/index.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/vnext/Desktop/NISUMU/load-balancer-config",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/vnext/Desktop/NISUMU/load-balancer-config/index.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/vnext/Desktop/NISUMU/load-balancer-config/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/vnext/Desktop/NISUMU/load-balancer-config/",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "const express = require(\"express\");\n\nconst fs = require(\"fs\");\n\nconst bodyParser = require('body-parser');\n\nconst app = express();\nconst port = \"8000\";\nconst host = \"0.0.0.0\";\n\nconst shell = require('shelljs');\n/**\n * Routes Definitions\n */\n\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: false\n}));\napp.post(\"/\", (req, res) => {\n  const {\n    IP,\n    flag\n  } = req.body;\n  const fileHost = './host.txt';\n  const ipReplace = `server ${IP};`;\n  let result = null;\n  fs.readFile(fileHost, 'utf8', function (err, data) {\n    if (err) return console.log(err);\n    /** Delete ip server **/\n\n    if (flag) {\n      if (data.indexOf('#no') !== -1) {\n        result = data.replace(ipReplace, '');\n      } else {\n        result = data.replace(ipReplace, '#no');\n      }\n    } else {\n      /** Add ip server **/\n      result = data.replace(/#no/g, ipReplace + '\\n #no');\n    }\n\n    fs.writeFile(fileHost, result, 'utf8', function (err) {\n      if (err) return console.log(err);\n      shell.exec(\"sudo /etc/init.d/nginx reload\");\n    });\n  });\n  res.status(200).send(\"SET HOST success\");\n});\n/**\n * Server Activation\n */\n\napp.listen(port, host, () => {\n  console.log(`Listening to requests on http://${host}:${port}`);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImV4cHJlc3MiLCJyZXF1aXJlIiwiZnMiLCJib2R5UGFyc2VyIiwiYXBwIiwicG9ydCIsImhvc3QiLCJzaGVsbCIsInVzZSIsImpzb24iLCJ1cmxlbmNvZGVkIiwiZXh0ZW5kZWQiLCJwb3N0IiwicmVxIiwicmVzIiwiSVAiLCJmbGFnIiwiYm9keSIsImZpbGVIb3N0IiwiaXBSZXBsYWNlIiwicmVzdWx0IiwicmVhZEZpbGUiLCJlcnIiLCJkYXRhIiwiY29uc29sZSIsImxvZyIsImluZGV4T2YiLCJyZXBsYWNlIiwid3JpdGVGaWxlIiwiZXhlYyIsInN0YXR1cyIsInNlbmQiLCJsaXN0ZW4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFNBQUQsQ0FBdkI7O0FBQ0EsTUFBTUMsRUFBRSxHQUFHRCxPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxNQUFNRSxVQUFVLEdBQUdGLE9BQU8sQ0FBQyxhQUFELENBQTFCOztBQUVBLE1BQU1HLEdBQUcsR0FBR0osT0FBTyxFQUFuQjtBQUNBLE1BQU1LLElBQUksR0FBRyxNQUFiO0FBQ0EsTUFBTUMsSUFBSSxHQUFHLFNBQWI7O0FBRUEsTUFBTUMsS0FBSyxHQUFHTixPQUFPLENBQUMsU0FBRCxDQUFyQjtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FHLEdBQUcsQ0FBQ0ksR0FBSixDQUFRTCxVQUFVLENBQUNNLElBQVgsRUFBUjtBQUNBTCxHQUFHLENBQUNJLEdBQUosQ0FBUUwsVUFBVSxDQUFDTyxVQUFYLENBQXNCO0FBQUVDLEVBQUFBLFFBQVEsRUFBRTtBQUFaLENBQXRCLENBQVI7QUFFQVAsR0FBRyxDQUFDUSxJQUFKLENBQVMsR0FBVCxFQUFjLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQ3hCLFFBQU07QUFBRUMsSUFBQUEsRUFBRjtBQUFNQyxJQUFBQTtBQUFOLE1BQWVILEdBQUcsQ0FBQ0ksSUFBekI7QUFDQSxRQUFNQyxRQUFRLEdBQUcsWUFBakI7QUFDQSxRQUFNQyxTQUFTLEdBQUksVUFBU0osRUFBRyxHQUEvQjtBQUNBLE1BQUlLLE1BQU0sR0FBRyxJQUFiO0FBQ0FsQixFQUFBQSxFQUFFLENBQUNtQixRQUFILENBQVlILFFBQVosRUFBc0IsTUFBdEIsRUFBOEIsVUFBVUksR0FBVixFQUFjQyxJQUFkLEVBQW9CO0FBQzlDLFFBQUlELEdBQUosRUFBUyxPQUFPRSxPQUFPLENBQUNDLEdBQVIsQ0FBWUgsR0FBWixDQUFQO0FBQ1Q7O0FBQ0EsUUFBSU4sSUFBSixFQUFVO0FBQ04sVUFBSU8sSUFBSSxDQUFDRyxPQUFMLENBQWEsS0FBYixNQUF3QixDQUFDLENBQTdCLEVBQWdDO0FBQzVCTixRQUFBQSxNQUFNLEdBQUdHLElBQUksQ0FBQ0ksT0FBTCxDQUFhUixTQUFiLEVBQXlCLEVBQXpCLENBQVQ7QUFDSCxPQUZELE1BRU87QUFDSEMsUUFBQUEsTUFBTSxHQUFHRyxJQUFJLENBQUNJLE9BQUwsQ0FBYVIsU0FBYixFQUF3QixLQUF4QixDQUFUO0FBQ0g7QUFDSixLQU5ELE1BTU87QUFBRTtBQUNMQyxNQUFBQSxNQUFNLEdBQUdHLElBQUksQ0FBQ0ksT0FBTCxDQUFhLE1BQWIsRUFBc0JSLFNBQVMsR0FBRyxRQUFsQyxDQUFUO0FBQ0g7O0FBQ0RqQixJQUFBQSxFQUFFLENBQUMwQixTQUFILENBQWFWLFFBQWIsRUFBdUJFLE1BQXZCLEVBQStCLE1BQS9CLEVBQXVDLFVBQVVFLEdBQVYsRUFBZTtBQUNsRCxVQUFJQSxHQUFKLEVBQVMsT0FBT0UsT0FBTyxDQUFDQyxHQUFSLENBQVlILEdBQVosQ0FBUDtBQUNUZixNQUFBQSxLQUFLLENBQUNzQixJQUFOLENBQVcsK0JBQVg7QUFDSCxLQUhEO0FBSUgsR0FoQkQ7QUFpQkFmLEVBQUFBLEdBQUcsQ0FBQ2dCLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQixrQkFBckI7QUFDSCxDQXZCRDtBQXlCQTtBQUNBO0FBQ0E7O0FBRUEzQixHQUFHLENBQUM0QixNQUFKLENBQVczQixJQUFYLEVBQWlCQyxJQUFqQixFQUF1QixNQUFNO0FBQ3pCa0IsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQWEsbUNBQWtDbkIsSUFBSyxJQUFHRCxJQUFLLEVBQTVEO0FBQ0gsQ0FGRCIsInNvdXJjZVJvb3QiOiIvVXNlcnMvdm5leHQvRGVza3RvcC9OSVNVTVUvbG9hZC1iYWxhbmNlci1jb25maWcvIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoXCJleHByZXNzXCIpO1xuY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XG5jb25zdCBib2R5UGFyc2VyID0gcmVxdWlyZSgnYm9keS1wYXJzZXInKTtcblxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuY29uc3QgcG9ydCA9IFwiODAwMFwiO1xuY29uc3QgaG9zdCA9IFwiMC4wLjAuMFwiO1xuXG5jb25zdCBzaGVsbCA9IHJlcXVpcmUoJ3NoZWxsanMnKTtcbi8qKlxuICogUm91dGVzIERlZmluaXRpb25zXG4gKi9cbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBleHRlbmRlZDogZmFsc2UgfSkpO1xuXG5hcHAucG9zdChcIi9cIiwgKHJlcSwgcmVzKSA9PiB7XG4gICAgY29uc3QgeyBJUCwgZmxhZyB9ID0gcmVxLmJvZHk7XG4gICAgY29uc3QgZmlsZUhvc3QgPSAnLi9ob3N0LnR4dCdcbiAgICBjb25zdCBpcFJlcGxhY2UgPSBgc2VydmVyICR7SVB9O2BcbiAgICBsZXQgcmVzdWx0ID0gbnVsbFxuICAgIGZzLnJlYWRGaWxlKGZpbGVIb3N0LCAndXRmOCcsIGZ1bmN0aW9uIChlcnIsZGF0YSkge1xuICAgICAgICBpZiAoZXJyKSByZXR1cm4gY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgLyoqIERlbGV0ZSBpcCBzZXJ2ZXIgKiovXG4gICAgICAgIGlmIChmbGFnKSB7XG4gICAgICAgICAgICBpZiAoZGF0YS5pbmRleE9mKCcjbm8nKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBkYXRhLnJlcGxhY2UoaXBSZXBsYWNlICwgJycpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBkYXRhLnJlcGxhY2UoaXBSZXBsYWNlLCAnI25vJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7IC8qKiBBZGQgaXAgc2VydmVyICoqL1xuICAgICAgICAgICAgcmVzdWx0ID0gZGF0YS5yZXBsYWNlKC8jbm8vZyAsIGlwUmVwbGFjZSArICdcXG4gI25vJyk7XG4gICAgICAgIH1cbiAgICAgICAgZnMud3JpdGVGaWxlKGZpbGVIb3N0LCByZXN1bHQsICd1dGY4JywgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgaWYgKGVycikgcmV0dXJuIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICBzaGVsbC5leGVjKFwic3VkbyAvZXRjL2luaXQuZC9uZ2lueCByZWxvYWRcIilcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmVzLnN0YXR1cygyMDApLnNlbmQoXCJTRVQgSE9TVCBzdWNjZXNzXCIpO1xufSk7XG5cbi8qKlxuICogU2VydmVyIEFjdGl2YXRpb25cbiAqL1xuXG5hcHAubGlzdGVuKHBvcnQsIGhvc3QsICgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhgTGlzdGVuaW5nIHRvIHJlcXVlc3RzIG9uIGh0dHA6Ly8ke2hvc3R9OiR7cG9ydH1gKTtcbn0pO1xuIl19",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "express",
        "require",
        "fs",
        "bodyParser",
        "app",
        "port",
        "host",
        "shell",
        "use",
        "json",
        "urlencoded",
        "extended",
        "post",
        "req",
        "res",
        "IP",
        "flag",
        "body",
        "fileHost",
        "ipReplace",
        "result",
        "readFile",
        "err",
        "data",
        "console",
        "log",
        "indexOf",
        "replace",
        "writeFile",
        "exec",
        "status",
        "send",
        "listen"
      ],
      "mappings": "AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,aAAD,CAA1B;;AAEA,MAAMG,GAAG,GAAGJ,OAAO,EAAnB;AACA,MAAMK,IAAI,GAAG,MAAb;AACA,MAAMC,IAAI,GAAG,SAAb;;AAEA,MAAMC,KAAK,GAAGN,OAAO,CAAC,SAAD,CAArB;AACA;AACA;AACA;;;AACAG,GAAG,CAACI,GAAJ,CAAQL,UAAU,CAACM,IAAX,EAAR;AACAL,GAAG,CAACI,GAAJ,CAAQL,UAAU,CAACO,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR;AAEAP,GAAG,CAACQ,IAAJ,CAAS,GAAT,EAAc,CAACC,GAAD,EAAMC,GAAN,KAAc;AACxB,QAAM;AAAEC,IAAAA,EAAF;AAAMC,IAAAA;AAAN,MAAeH,GAAG,CAACI,IAAzB;AACA,QAAMC,QAAQ,GAAG,YAAjB;AACA,QAAMC,SAAS,GAAI,UAASJ,EAAG,GAA/B;AACA,MAAIK,MAAM,GAAG,IAAb;AACAlB,EAAAA,EAAE,CAACmB,QAAH,CAAYH,QAAZ,EAAsB,MAAtB,EAA8B,UAAUI,GAAV,EAAcC,IAAd,EAAoB;AAC9C,QAAID,GAAJ,EAAS,OAAOE,OAAO,CAACC,GAAR,CAAYH,GAAZ,CAAP;AACT;;AACA,QAAIN,IAAJ,EAAU;AACN,UAAIO,IAAI,CAACG,OAAL,CAAa,KAAb,MAAwB,CAAC,CAA7B,EAAgC;AAC5BN,QAAAA,MAAM,GAAGG,IAAI,CAACI,OAAL,CAAaR,SAAb,EAAyB,EAAzB,CAAT;AACH,OAFD,MAEO;AACHC,QAAAA,MAAM,GAAGG,IAAI,CAACI,OAAL,CAAaR,SAAb,EAAwB,KAAxB,CAAT;AACH;AACJ,KAND,MAMO;AAAE;AACLC,MAAAA,MAAM,GAAGG,IAAI,CAACI,OAAL,CAAa,MAAb,EAAsBR,SAAS,GAAG,QAAlC,CAAT;AACH;;AACDjB,IAAAA,EAAE,CAAC0B,SAAH,CAAaV,QAAb,EAAuBE,MAAvB,EAA+B,MAA/B,EAAuC,UAAUE,GAAV,EAAe;AAClD,UAAIA,GAAJ,EAAS,OAAOE,OAAO,CAACC,GAAR,CAAYH,GAAZ,CAAP;AACTf,MAAAA,KAAK,CAACsB,IAAN,CAAW,+BAAX;AACH,KAHD;AAIH,GAhBD;AAiBAf,EAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,kBAArB;AACH,CAvBD;AAyBA;AACA;AACA;;AAEA3B,GAAG,CAAC4B,MAAJ,CAAW3B,IAAX,EAAiBC,IAAjB,EAAuB,MAAM;AACzBkB,EAAAA,OAAO,CAACC,GAAR,CAAa,mCAAkCnB,IAAK,IAAGD,IAAK,EAA5D;AACH,CAFD",
      "sourceRoot": "/Users/vnext/Desktop/NISUMU/load-balancer-config/",
      "sourcesContent": [
        "const express = require(\"express\");\nconst fs = require(\"fs\");\nconst bodyParser = require('body-parser');\n\nconst app = express();\nconst port = \"8000\";\nconst host = \"0.0.0.0\";\n\nconst shell = require('shelljs');\n/**\n * Routes Definitions\n */\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n\napp.post(\"/\", (req, res) => {\n    const { IP, flag } = req.body;\n    const fileHost = './host.txt'\n    const ipReplace = `server ${IP};`\n    let result = null\n    fs.readFile(fileHost, 'utf8', function (err,data) {\n        if (err) return console.log(err);\n        /** Delete ip server **/\n        if (flag) {\n            if (data.indexOf('#no') !== -1) {\n                result = data.replace(ipReplace , '');\n            } else {\n                result = data.replace(ipReplace, '#no');\n            }\n        } else { /** Add ip server **/\n            result = data.replace(/#no/g , ipReplace + '\\n #no');\n        }\n        fs.writeFile(fileHost, result, 'utf8', function (err) {\n            if (err) return console.log(err);\n            shell.exec(\"sudo /etc/init.d/nginx reload\")\n        });\n    });\n    res.status(200).send(\"SET HOST success\");\n});\n\n/**\n * Server Activation\n */\n\napp.listen(port, host, () => {\n    console.log(`Listening to requests on http://${host}:${port}`);\n});\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1626251555275
  }
}